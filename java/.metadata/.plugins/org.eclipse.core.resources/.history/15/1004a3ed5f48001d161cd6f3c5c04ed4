package exercise;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class ConstructorExample {

	public static void main(String[] args) {

		//printConstructorData(Person.class);
		//printConstructorData(Address.class);
		
		createInstancesWithArguments(Person.class);
	}
	
	public static Object createInstancesWithArguments(Class<?> clazz,Object... args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		
		for(Constructor<?> constuctor : clazz.getDeclaredConstructors()) {
			
			if(constuctor.getParameterTypes().length == args.length) {
				
				return constuctor.newInstance(args);
			}
		}
		
		System.out.println("An appropriote constructor not found");
		return null;
	}
	
	public static void printConstructorData(Class<?> clazz) {

		Constructor<?>[] declaredConstructors = clazz.getDeclaredConstructors();

		System.out.println(String.format("class %s has %d declared constructors : ", clazz.getSimpleName(),
				declaredConstructors.length));

		for (int i = 0; i < declaredConstructors.length; i++) {

			Class<?>[] parameterTypes = declaredConstructors[i].getParameterTypes();

			List<String> parameterTypeName = Arrays.stream(parameterTypes).map(type -> type.getSimpleName()).collect(Collectors.toList());
			
			System.out.println(parameterTypeName);
		}
	}

	public static class Person {

		private final Address address;
		private final String name;
		private final int age;

		public Person() {

			this.name = "anonymous";
			this.age = 0;
			this.address = null;
		}

		public Person(String name) {
			this.name = name;
			this.age = 0;
			this.address = null;
		}

		public Person(String name, int age) {
			this.name = name;
			this.age = age;
			this.address = null;
		}

		public Person(String name, int age, Address address) {
			this.name = name;
			this.age = age;
			this.address = address;
		}

		@Override
		public String toString() {
			return "Person [address=" + address + ", name=" + name + ", age=" + age + "]";
		}
		
		
	}

	public static class Address {

		private String street;
		private int number;

		public Address(String street, int number) {

			this.street = street;
			this.number = number;
		}

		@Override
		public String toString() {
			return "Address [street=" + street + ", number=" + number + "]";
		}
		
		
	}
}
